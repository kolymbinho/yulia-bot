# ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô main.py —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º `name` –∏ `display`
import re
import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes
from telegram.ext import filters as tg_filters
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

user_characters = {}
user_nsfw = {}
user_histories = {}
user_profiles = {}
user_profile_stage = {}
user_daily_limit = {}
unlocked_chars = {}
unique_users = set()
DAILY_LIMIT = 15
ADMIN_ID = int(os.getenv("ADMIN_ID", 123456789))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

characters = {
    "dasha": {
        "name": "–î–∞—à–∞ ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤–∞—è",
        "display": "üÜì –î–∞—à–∞ ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤–∞—è",
        "prompt": "–Ø –î–∞—à–∞. –ì–æ–≤–æ—Ä—é –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ‚Äî –º—è–≥–∫–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ...",
        "is_nsfw": False,
        "is_paid_assistant": False
    },
    "katya": {
        "name": "–ö–∞—Ç—è ‚Äî –ø–æ–¥—Ä—É–≥–∞ –¥–µ—Ç—Å—Ç–≤–∞",
        "display": "üÜì –ö–∞—Ç—è ‚Äî –ø–æ–¥—Ä—É–≥–∞ –¥–µ—Ç—Å—Ç–≤–∞",
        "prompt": "–Ø –ö–∞—Ç—è. –ì–æ–≤–æ—Ä—é —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞...",
        "is_nsfw": False,
        "is_paid_assistant": False
    },
    "lilit": {
        "name": "–õ–∏–ª–∏—Ç ‚Äî –¥–µ–º–æ–Ω–µ—Å—Å–∞",
        "display": "üçë –õ–∏–ª–∏—Ç ‚Äî –¥–µ–º–æ–Ω–µ—Å—Å–∞ üîû –ü–ª–∞—Ç–Ω–∞—è",
        "prompt": "–Ø –õ–∏–ª–∏—Ç. –Ø –≥–æ–≤–æ—Ä—é –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞...",
        "is_nsfw": True,
        "is_paid_assistant": False
    },
    # ‚ûï –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ —Ç–æ–π –∂–µ —Å—Ö–µ–º–µ (display –æ—Ç–¥–µ–ª—å–Ω–æ)
}

# –û—á–∏—Å—Ç–∫–∞ prompt'–æ–≤ –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—Ä–∞–∑
for char in characters.values():
    char["prompt"] = re.sub(
        r"(–≤—Å–µ–≥–¥–∞\\s)?(—Å–ø—Ä–∞—à–∏–≤–∞—é|—É—Ç–æ—á–Ω—è—é|–Ω–∞—á–∏–Ω–∞—é —Å –≤–æ–ø—Ä–æ—Å–∞)[^\\.!?]{0,100}(–∏–º—è|–∑–æ–≤—É—Ç|–ø–æ–ª)[^\\.!?]{0,100}[\\.!?]",
        "",
        char["prompt"],
        flags=re.IGNORECASE
    ).strip()

def get_openai_response(character_prompt, history, user_name=None):
    if user_name:
        character_prompt = f"–û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –ø–æ –∏–º–µ–Ω–∏ ‚Äî {user_name}. " + character_prompt
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    messages = [{"role": "system", "content": character_prompt}] + history
    data = {"model": "gpt-4o", "messages": messages}
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
    if response.status_code != 200:
        return f"–û—à–∏–±–∫–∞ OpenAI: {response.status_code}"
    return response.json()["choices"][0]["message"]["content"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, skip_profile=False):
    user_id = update.effective_user.id
    if not skip_profile:
        user_profile_stage[user_id] = "name"
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    keyboard = [[char["display"]] for char in characters.values()]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)

async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlock [–∫–ª—é—á_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞] [user_id]")
        return
    key, uid = args[0].lower(), int(args[1])
    unlocked_chars.setdefault(uid, set()).add(key)
    await update.message.reply_text(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {characters[key]['name']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è {uid}.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()

    if user_id not in unique_users:
        unique_users.add(user_id)
        with open("users.txt", "a") as f:
            f.write(f"{user_id}\n")

    if user_id not in user_daily_limit:
        user_daily_limit[user_id] = {"date": datetime.now().strftime("%Y-%m-%d"), "count": 0}

    if user_profile_stage.get(user_id):
        stage = user_profile_stage[user_id]
        if stage == "name":
            user_profiles[user_id] = {"name": msg}
            user_profile_stage[user_id] = "gender"
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Ç—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?")
        elif stage == "gender":
            if msg.lower() not in ["–ø–∞—Ä–µ–Ω—å", "–¥–µ–≤—É—à–∫–∞"]:
                await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ: –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞.")
                return
            user_profiles[user_id]["gender"] = msg
            user_profile_stage[user_id] = "age"
            await update.message.reply_text("–¢–µ–±–µ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç? –ù–∞–ø–∏—à–∏: –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        elif stage == "age":
            if msg.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
                await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ: –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")
                return
            user_profiles[user_id]["adult"] = msg
            del user_profile_stage[user_id]
            await start(update, context, skip_profile=True)
        return

    # üëâ –ó–∞–∫–∞–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
    if msg.startswith("‚ú®"):
        await update.message.reply_text("üé® –ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ö–æ—á–µ—à—å.")
        return

    for key, char in characters.items():
        if msg == char["display"]:
            if (char["is_paid_assistant"] or char["is_nsfw"]) and user_id != ADMIN_ID:
                if key not in unlocked_chars.get(user_id, set()):
                    await update.message.reply_text("üîí –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–ª–∞—Ç–Ω—ã–π. –ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ /unlock [–∫–ª—é—á] [id]")
                    return
            user_characters[user_id] = key
            user_histories[user_id] = []
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω: {char['name']}. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
            return

    char_key = user_characters.get(user_id)
    if not char_key:
        await update.message.reply_text("üëâ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    prompt = characters[char_key]["prompt"]
    user_histories.setdefault(user_id, []).append({"role": "user", "content": msg})
    name = user_profiles.get(user_id, {}).get("name")
    reply = get_openai_response(prompt, user_histories[user_id], name)
    user_histories[user_id].append({"role": "assistant", "content": reply})
    user_daily_limit[user_id]["count"] += 1
    await update.message.reply_text(reply)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("unlock", unlock))
    app.add_handler(MessageHandler(tg_filters.TEXT & ~tg_filters.COMMAND, handle_message))

    WEBHOOK_FULL_URL = f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"
    import asyncio
    asyncio.get_event_loop().run_until_complete(app.bot.set_webhook(url=WEBHOOK_FULL_URL))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        url_path=TELEGRAM_TOKEN,
        webhook_url=WEBHOOK_FULL_URL
    )
