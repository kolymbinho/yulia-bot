import re
import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes
from telegram.ext import filters as tg_filters
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# üß† –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_characters = {}
user_nsfw = {}
user_histories = {}
user_profiles = {}
user_profile_stage = {}
user_daily_limit = {}
unlocked_chars = {}
unique_users = set()
DAILY_LIMIT = 15
ADMIN_ID = int(os.getenv("ADMIN_ID", 123456789))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã characters, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
characters = {
    "yulia": {"name": "–Æ–ª—è", "prompt": "–¢—ã –≤–µ—Å—ë–ª–∞—è, –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è, –≥–æ–≤–æ—Ä–∏—à—å –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞."},
    "dasha": {"name": "–î–∞—à–∞ ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤–∞—è", "prompt": "–¢—ã –¥–æ–±—Ä–∞—è –∏ –Ω–µ–∂–Ω–∞—è..."},
    # –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
}

# –û—á–∏—Å—Ç–∫–∞ prompt –æ—Ç –ª–∏—à–Ω–µ–≥–æ
for char in characters.values():
    char["prompt"] = re.sub(
        r"(–≤—Å–µ–≥–¥–∞\\s)?(—Å–ø—Ä–∞—à–∏–≤–∞—é|—É—Ç–æ—á–Ω—è—é|–Ω–∞—á–∏–Ω–∞—é —Å –≤–æ–ø—Ä–æ—Å–∞)[^\\.!?]{0,100}(–∏–º—è|–∑–æ–≤—É—Ç|–ø–æ–ª)[^\\.!?]{0,100}[\\.!?]",
        "",
        char["prompt"],
        flags=re.IGNORECASE
    ).strip()

# GPT

def get_openai_response(character_prompt, history, user_name=None):
    if user_name:
        character_prompt = f"–û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –ø–æ –∏–º–µ–Ω–∏ ‚Äî {user_name}. " + character_prompt
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    messages = [{"role": "system", "content": character_prompt}] + history

    data = {
        "model": "gpt-4o",
        "messages": messages
    }

    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {response.status_code} {response.text}")
        return f"–û—à–∏–±–∫–∞ OpenAI: {response.status_code}"

    result = response.json()
    return result["choices"][0]["message"]["content"]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, skip_profile=False):
    user_id = update.effective_user.id

    if not skip_profile:
        user_profile_stage[user_id] = "name"
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏: –æ—Ç –Ω—è—à–∏ –¥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.\n\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∫–µ—Ç—ã.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
        return

    # –ü–æ–∫–∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    custom_button = [["‚ú®üõ† –ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ú®"]]

    free_buttons = [["üÜì –î–∞—à–∞ ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤–∞—è"], ["üÜì –í–∏–∫–∞ ‚Äî —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è"], ["üÜì –ö–∞—Ç—è ‚Äî –ø–æ–¥—Ä—É–≥–∞ –¥–µ—Ç—Å—Ç–≤–∞"], ["üÜì –û–∫—Å–∞–Ω–∞ ‚Äî —Å–µ–ª—å—Å–∫–∞—è"]]
    assist_buttons = [["üîì –ï–≤–∞ ‚Äî –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω"], ["üîì –ò—Ä–∞ ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥"]]
    nsfw_buttons = [[f"üçë {char['name']}"] for char in characters.values() if char.get("is_nsfw", False)]

    keyboard = custom_button + free_buttons
    if assist_buttons:
        keyboard += [["---- üîì –ü–ª–∞—Ç–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã ----"]] + assist_buttons
    if nsfw_buttons:
        keyboard += [["---- üîû –ü–ª–∞—Ç–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ ----"]] + nsfw_buttons

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    print(f"[DEBUG] User ID: {user_id} | Message: {user_message}")

    if user_id not in unique_users:
        unique_users.add(user_id)
        with open("users.txt", "a") as f:
            f.write(f"{user_id}\n")

    today = datetime.now().strftime("%Y-%m-%d")
    if user_id not in user_daily_limit:
        user_daily_limit[user_id] = {"date": today, "count": 0}
    elif user_daily_limit[user_id]["date"] != today:
        user_daily_limit[user_id] = {"date": today, "count": 0}

    if user_daily_limit[user_id]["count"] >= DAILY_LIMIT:
        await update.message.reply_text("üõë –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n–ù–∞–ø–∏—à–∏ /donate, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç üîì")
        return

    if user_id in user_profile_stage:
        stage = user_profile_stage[user_id]
        if stage == "name":
            name = user_message.strip()
            user_profiles[user_id] = {"name": name}
            user_profile_stage[user_id] = "gender"
            await update.message.reply_text("–ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Ç—ã –º–∞–ª—å—á–∏–∫ –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞?")
            return
        elif stage == "gender":
            gender = user_message.strip().lower()
            if gender in ["–º–∞–ª—å—á–∏–∫", "–¥–µ–≤–æ—á–∫–∞"]:
                user_profiles[user_id]["gender"] = gender
                del user_profile_stage[user_id]
                await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá")
                await start(update, context, skip_profile=True)
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ: –º–∞–ª—å—á–∏–∫ –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞.")
            return

    if user_message == "‚ú®üõ† –ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ú®":
        await update.message.reply_text(
            "üé® –•–æ—á–µ—à—å —Å–≤–æ–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?\n\n"
            "üí° –ù–∞–ø–∏—à–∏ –∏–¥–µ—é: –∫—Ç–æ –æ–Ω, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∫–∞–∫ –æ–±—â–∞–µ—Ç—Å—è –∏ —Ç.–¥.\n"
            "üí≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É: /unlock [–∫–ª—é—á_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞] [—Ç–≤–æ–π ID]\n"
            "‚ùì –ù–µ –∑–Ω–∞–µ—à—å —Å–≤–æ–π ID? –ù–∞–ø–∏—à–∏ /id ‚Äî –∏ —è –ø–æ–∫–∞–∂—É!"
        )
        user_characters[user_id] = "custom_request"
        user_histories[user_id] = []
        return

    if user_characters.get(user_id) == "custom_request":
        idea = user_message.strip()
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"üì¨ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç {user_id}:\n{idea}")
        await update.message.reply_text(
            "üí° –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
            "/unlock [–∫–ª—é—á –ø–µ—Ä—Å–æ–Ω–∞–∂–∞] [—Ç–≤–æ–π ID] –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
            "‚ùì –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—à–∏ /id"
        )
        return

    cleaned_message = user_message.replace("üÜì ", "").replace("üîì ", "").replace("üçë ", "").strip()

    for key, char in characters.items():
        if cleaned_message == char["name"]:
            if char.get("is_nsfw") or char.get("is_paid_assistant"):
                if user_id != ADMIN_ID:
                    if user_id not in unlocked_chars or key not in unlocked_chars[user_id]:
                        await update.message.reply_text(
                            "üîí –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–ª–∞—Ç–Ω—ã–π!\n\n"
                            "üí∞ –ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚Äî *30 –≥—Ä–Ω*\n"
                            "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∫–∞—Ä—Ç—É *4441 1110 6118 4036*\n"
                            "üì© –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É: /unlock [–∫–ª—é—á_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞] [—Ç–≤–æ–π ID]\n"
                            "‚ùì –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—à–∏ /id"
                        )
                        return
            user_characters[user_id] = key
            user_histories[user_id] = []
            avatar_path = f"avatars/{key}.jpg"
            if os.path.exists(avatar_path):
                with open(avatar_path, 'rb') as photo:
                    await update.message.reply_photo(photo)
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω: {char['name']}. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
            return

    character_key = user_characters.get(user_id, "yulia")
    character_prompt = characters[character_key]["prompt"]

    user_histories.setdefault(user_id, [])
    user_histories[user_id].append({"role": "user", "content": user_message})

    user_name = user_profiles.get(user_id, {}).get("name")
    bot_response = get_openai_response(character_prompt, user_histories[user_id], user_name)
    user_histories[user_id].append({"role": "assistant", "content": bot_response})

    user_daily_limit[user_id]["count"] += 1
    await update.message.reply_text(bot_response)

# /donate
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∞—Ä—Ö–µ—Ç–∏–ø–∞–º –∏–ª–∏ –∑–∞–∫–∞–∂–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\nüîó https://donatty.com/—Ç–≤–æ–π_–Ω–∏–∫_–∏–ª–∏_—Å—Å—ã–ª–∫–∞\n–∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∫–∞—Ä—Ç—É üí≥ 4441 1110 6118 4036\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å /unlock –∏ —Å–≤–æ–π ID –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üòâ")

# /unlock
async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlock [character_key] [user_id]\n\n–ü—Ä–∏–º–µ—Ä: /unlock diana 123456789")
        return

    character_key = args[0].lower()
    target_user_id = int(args[1])

    if character_key not in characters:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç.")
        return

    if target_user_id not in unlocked_chars:
        unlocked_chars[target_user_id] = set()

    unlocked_chars[target_user_id].add(character_key)
    await update.message.reply_text(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {characters[character_key]['name']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")

# /id
async def show_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –¢–≤–æ–π Telegram ID: {user_id}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("donate", donate))
    app.add_handler(CommandHandler("unlock", unlock))
    app.add_handler(CommandHandler("id", show_id))
    app.add_handler(MessageHandler(tg_filters.TEXT & ~tg_filters.COMMAND, handle_message))

    WEBHOOK_FULL_URL = f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"

    async def set_webhook():
        await app.bot.set_webhook(url=WEBHOOK_FULL_URL)
        print("[setWebhook] ‚úÖ –í–µ–±—Ö—É–∫ –æ–±–Ω–æ–≤–ª—ë–Ω:", WEBHOOK_FULL_URL)

    import asyncio
    asyncio.get_event_loop().run_until_complete(set_webhook())

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        url_path=TELEGRAM_TOKEN,
        webhook_url=WEBHOOK_FULL_URL
    )
